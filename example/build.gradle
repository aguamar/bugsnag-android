buildscript {
    repositories {
        jcenter()
        google()
        mavenLocal()
    }
    dependencies {
        classpath 'com.bugsnag:bugsnag-android-gradle-plugin:3.2.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$project.KOTLIN_VERSION"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

import com.android.build.OutputFile

repositories {
    jcenter()
    google()
}

ext.abiCodes = ["armeabi-v7a": 1, "arm64-v8a": 2]

android {

    compileSdkVersion Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_TARGET_SDK_VERSION)

        manifestPlaceholders = [
            bugsnagApiKey                    : "e7cfd6156fa5de611558c49bb7a638c7",
            bugsnagBuildUUID                 : "abc123",
            bugsnagAppVersion                : "1.0.0",
            bugsnagEndpoint                  : "https://notify.bugsnag.com",
            bugsnagSessionsEndpoint          : "https://sessions.bugsnag.com",
            bugsnagReleaseStage              : "debug",
            bugsnagSendThreads               : true,
            bugsnagEnableExceptionHandler    : true,
            bugsnagPersistUserBetweenSessions: false
        ]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    splits {
        // Configures screen ABI split settings
        abi {
            // Enable ABI APK splits
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips

            // Resets the list of ABIs that Gradle should create APKs for to none
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for
            include "arm64-v8a", "armeabi-v7a"

            // Specify that we want to also generate a universal APK that includes all ABIs
            universalApk true
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.all { output ->
                def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
                output.versionCodeOverride = variant.versionCode * 10 + (baseAbiVersionCode == null ? 0 : baseAbiVersionCode)
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
        }
    }

    lintOptions {
        disable 'OnClick'
        abortOnError true
    }
}

dependencies {
    implementation project(":sdk")
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:support-v4:$supportLibVersion"
//    kotlinExampleImplementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$project.KOTLIN_VERSION"

    androidTestImplementation "com.android.support.test:runner:$supportTestVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test:rules:$supportTestVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

apply plugin: 'com.bugsnag.android.gradle'

apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "6.16"
}
task("checkstyle", type: Checkstyle) {
    configFile rootProject.file("config/checkstyle/checkstyle.xml")
    source "src/javaExample/java"
    include "**/*.java"
    classpath = files()
}

bugsnag {
    endpoint 'http://localhost:9000'
    retryCount 5
    overwrite true

    ndk false
    autoReportBuilds false
    autoUpload false
//    autoProguardConfig false
}
